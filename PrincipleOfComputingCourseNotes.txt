Notes here --: 
=====================================================================================================

<week_1>

- Designing Programs:

1. Read - Gather information about the problem from various information sources.
	- Read the problem definition / statement. Discuss the assignment with those who created it and your peers.
	- Gather examples of sample input and desired output.
	- Identify properties of the problem input. Understand and formulate properties of the output.
	- Read the documentation for any APIs/classes provided for the problem.
	
	
2. Think - Consider how to go about solving the problem.
	- Identify what you do and don't understand about solving the problem.
	- Focus on learning how to solve those parts that you don't understand. Read books, articles, forums, Stack Overflow, etc.
	- Experiment in isolation with solutions to parts of the problem that you don't understand.
	- Sketch a step-by-step solution to the problem in English. Refine this solution until you are confident 
	  that you understand all of the steps.
	  
3. Sketch - Outline the structure and functionality of your solution.
	- Decide on data representation (classes) and algorithms (methods) for core computational processes in the solution.
	- Formulate class definitions with needed methods as stubs (using pass or return).
	- Write docstrings for the methods that includes the data types for inputs and outputs.
	
4. Code and test - Implement and test the various methods in your class definitions.
	- Implement the initiailizer method __init__() for the class that lays out the basic class data in class fields.
	- Implement the string method __str__() method that returns a text representation of the class data.
	- Use the string method to test the initializer on several sets of test data created for the class.
	- For each remaining method, generate example input and output data.
	- Incrementally implement part of each method. Test your partial implementation on the test data. 
	  Add more test data as necessary.
	- Repeat this last step as necessary until the implementation is complete. 
	  Avoid adding large chunks of code to a method without testing.
	  
5. Review and refactor - Review each version of the solution. Refactor your code to eliminate common issues.
	- Identify repeated code fragments. Introduce appropriate abstractions to remove this duplicated code.
	- Decompose code into smaller logical pieces to avoid lengthy segments of code.
	- Think more and rewrite to simplify convoluted code.
	- Identify computational bottlenecks via counting and rewrite to improve the performance of slow-running code.
	
make a list of the steps that you follow when building a program to solve a particular problem. 
This list doesn't have to be particularly detailed, but should be a starting point

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>